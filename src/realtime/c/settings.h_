#ifndef SETTINGS_H
#define SETTINGS_H

#include "RTES.h"
#include "Input/input.h"
#include "Output/output.h"

inputSettings_t inputSettings;
outputSettings_t outputSettings;
cancelSettings_t cancelSettings;
recognizeSettings_t recognizeSettings;

void createSettings(uint32_t sampleRate,
                    buffer_t *inputToRecognizeBuffer,
                    buffer_t *recognizeToCancelBuffer,
                    buffer_t *cancelToOutputBuffer, FILE *fpOutput) {
    // Wav-file has a sample rate of 44,1 kHz
    // 44100 = 2^2 * 3^2 * 5^2 * 7^2
    // (note: 2, 3, 5 and 7 are the first 4 prime numbers)
    // We want to run the recognize task every 20ms (50/s)
    // 50 = 2 * 5^2
    // therefore the ratio between Recognize and Input is the remaining
    // prime factors: 2 * 3^2 * 7^2 = 882
    // So the ratio between the Recognize and Input Task is 882.
    // This means the recognize tasks has to process 882 samples per period

    inputSettings = {
        .base = {
            .pcTaskname = "Input Task",
            .xTaskPeriod = 0, //TODO 
            // Ratio is compared to the input task, therefore this is 1
            .ratio = 1, //TODO
            .test = NULL 
        },
        .outBuffer = inputToRecognizeBuffer
    };
    
    outputSettings = {
        .base = {
            .pcTaskName = "Output Task",        
            .xTaskPeriod = 0, //TODO 
            // Output happens at the same samplerate as the input
            .ratio = 1,
            .test = NULL 
        },
        .inBuffer = cancelToOutputBuffer,
        .fpOutput = fpOutput
    };

    cancelSettings = {
        .base = {
            .pcTaskName = "Cancel Task",
            .xTaskPeriod = 0, //TODO 
            .ratio = 9999999, // Not running this task this time TODO
            .test = NULL 
        },
        .inBuffer = recognizeToCancelBuffer,
        .outBuffer = cancelToOutputBuffer,
        .cancelPercentage = 95
    };

    recognizeSettings = {
        .base = {
            .pcTaskName = "Recognize Task",
            .xTaskPeriod = 0, //TODO 
            .ratio = 882, // Same as segmentSize
            .test = NULL 
        },
        .inBuffer = inputToRecognizeBuffer,
        .outBuffer = recognizeToCancelBuffer,
        .segmentSize = 882, // Same as ratio
        .maxSamplesNoise = (size_t) sampleRate,
        .lowerLimitBegin = 500,
        .lowerLimitEnd = 0,
        .factorIncreaseBegin = 1.5F,
        .factorDecreaseEnd = 0.5F
    };
}

#endif /* SETTINGS_H */
